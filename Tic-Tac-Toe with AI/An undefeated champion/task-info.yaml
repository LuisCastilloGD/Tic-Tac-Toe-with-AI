type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Board {
        private char [][] board;
        private State state;
        private PlayerType player_O;
        private PlayerType player_X;

        enum PlayerType{
            USER,
            EASY,
            MEDIUM,
            HARD
        }

        enum State{
            X_WIN,
            O_WIN,
            DRAW,
            NOT_FINISHED

        };

        public Board(){
            board = new char[][]{
                    {' ', ' ', ' '},
                    {' ', ' ', ' '},
                    {' ', ' ', ' '}
            };
            updateStateBoard();

        }
        public Board(String oneLineBoardState){
            int aux = 0;
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++){
                    char c = oneLineBoardState.charAt(aux);
                    switch (c) {
                        case '_' -> board[i][j] = ' ';
                        case 'X' -> board[i][j] = 'X';
                        case 'O' -> board[i][j] = 'O';
                        default -> System.out.println("Error in initial Board");
                    }
                    aux++;
                }
            }
            updateStateBoard();

        }

        public boolean setPlayers(String p1,String p2) {
            switch (p1) {
                case "user" -> player_X = PlayerType.USER;
                case "easy" -> player_X = PlayerType.EASY;
                case "medium" -> player_X = PlayerType.MEDIUM;
                case "hard" -> player_X = PlayerType.HARD;
                default -> {System.out.println("Bad parameters"); return false;}
            }

            switch (p2) {
                case "user" -> player_O = PlayerType.USER;
                case "easy" -> player_O = PlayerType.EASY;
                case "medium" -> player_O = PlayerType.MEDIUM;
                case "hard" -> player_O = PlayerType.HARD;
                default -> {System.out.println("Bad parameters"); return false;}
            }
            return true;

        }

        public void printBoard(){
            System.out.println("---------");
            for(int i=0;i<3;i++){
                System.out.print("| ");
                for(int j=0;j<3;j++) {
                    System.out.print(board[i][j]+" ");
                }
                System.out.println("|");
            }
            System.out.println("---------");

        }

        private void inputMove(int[] cord){
            int cordX = cord[0];
            int cordY = cord[1];
            char move = getNextMoveChar();
            board[cordX][cordY] = move;

        }





        protected void updateStateBoard(){

            for (int i = 0; i < 3; i++) {
                //rows
                if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i]!=' '){
                    if(board[0][i] == 'X'){
                        printBoard();
                        System.out.println("X wins");
                        state = State.X_WIN;
                        cleanBoard();

                    }else {
                        printBoard();
                        System.out.println("O wins");
                        state =State.O_WIN;
                        cleanBoard();
                    }
                    return;

                }
                //columns
                if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0]!=' '){
                    if(board[i][0] == 'X'){
                        printBoard();
                        System.out.println("X wins");
                        state= State.X_WIN;
                        cleanBoard();
                    }else {
                        printBoard();
                        System.out.println("O wins");
                        state= State.O_WIN;
                        cleanBoard();
                    }
                    return;

                }
                //Diagonal
                if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0]!=' '){
                    if(board[0][0] == 'X'){
                        printBoard();
                        System.out.println("X wins");
                        state= State.X_WIN;
                        cleanBoard();

                    }else {
                        printBoard();
                        System.out.println("O wins");
                        state= State.O_WIN;
                        cleanBoard();

                    }
                    return;
                }
                //Diagonal
                if(board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[2][0]!=' '){
                    if(board[2][0] == 'X'){
                        printBoard();
                        System.out.println("X wins");
                        state= State.X_WIN;
                        cleanBoard();

                    }else {
                        printBoard();
                        System.out.println("O wins");
                        state= State.O_WIN;
                        cleanBoard();

                    }
                    return;
                }
            }

            if(isFull()){
                printBoard();
                System.out.println("Draw");
                state= State.DRAW;
                cleanBoard();

            }else{
                state= State.NOT_FINISHED;

            }

        }

        private char getNextMoveChar(){
            int countX=0,countO=0;
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++) {
                    if(board[i][j] == 'X'){
                        countX++;
                    }
                    if(board[i][j] == 'O'){
                        countO++;
                    }
                }
            }

            if(countX==countO){
                return 'X';
            } else if (countX>countO) {
                return 'O';
            }else{
                return 'X';
            }

        }

        protected void nextMove(){
            if(this.getNextMoveChar()=='X'){
                switch (this.player_X) {
                    case USER -> getMove();
                    case EASY -> generateMoveEasy();
                    case MEDIUM -> generateMoveMedium();
                    case HARD -> generateMoveHard();
                }
            }else{
                switch (this.player_O) {
                    case USER -> getMove();
                    case EASY -> generateMoveEasy();
                    case MEDIUM -> generateMoveMedium();
                    case HARD -> generateMoveHard();
                }
            }
        }
        private void getMove(){

            System.out.println("Enter the coordinates: ");
            Scanner scanner = new Scanner(System.in);
            if(scanner.hasNextInt()){
                int coordX = scanner.nextInt();
                if(scanner.hasNextInt()){
                    int coordY = scanner.nextInt();
                    coordY = coordY -1;
                    coordX = coordX -1;
                    if((coordX >= 0 && coordX<3)&&(coordY >= 0 && coordY<3)){
                        if(validateCord(coordX,coordY,false)){
                            int[] cords = {coordX,coordY};
                            inputMove(cords);
                        }else{
                            getMove();
                        }
                    }else{
                        System.out.println("Coordinates should be from 1 to 3!");
                        getMove();
                    }

                }else{
                    System.out.println("You should enter numbers!");
                    getMove();
                }
            }else{
                System.out.println("You should enter numbers!");
                getMove();
            }


        }

        private void generateRandomMove(){
            Random rand = new Random();
            int cordX = rand.nextInt(3);
            int cordY = rand.nextInt(3);
            int[] cords = {cordX,cordY};
            if(validateCord(cordX,cordY,true)){
                inputMove(cords);
            }else {
                generateRandomMove();
            }
        }
        private void generateMoveEasy(){
            System.out.println("Making move level \"easy\"");
            generateRandomMove();
        }

        private void generateMoveMedium(){
            //Search for two in a row to win
            //Search for two in a row for the enemy to stop
            char playerChar = getNextMoveChar();
            char enemyChar = getEnemyChar();

            if(analyzeTwoInARow(playerChar)) return;
            else if (analyzeTwoInARow(enemyChar)) return;
            else{
                System.out.println("Making move level \"medium\"");
                generateRandomMove();
            }
            return;

        }

        private boolean analyzeTwoInARow(char playerChar){
            //Horizontal two in a row
            for(int i=0;i<3;i++){
                if(board[i][0] == playerChar && board[i][1] == playerChar){
                    if(validateCord(i,2,true)){
                        System.out.println("Making move level \"medium\"");
                        int[] cord= {i,2};
                        inputMove(cord);
                        return true;
                    }
                }
                else if(board[i][1] == playerChar && board[i][2] == playerChar){
                    if(validateCord(i,0,true)){
                        System.out.println("Making move level \"medium\"");
                        int[] cord= {i,0};
                        inputMove(cord);
                        return true;
                    }
                }
            }
            //Vertical two in a row
            for(int j=0;j<3;j++){
                if(board[0][j] == playerChar && board[1][j] == playerChar){
                    if(validateCord(2,j,true)){
                        System.out.println("Making move level \"medium\"");
                        int[] cord= {2,j};
                        inputMove(cord);
                        return true;
                    }
                }
                else if(board[1][j] == playerChar && board[2][j] == playerChar){
                    if(validateCord(0,j,true)){
                        System.out.println("Making move level \"medium\"");
                        int[] cord= {0,j};
                        inputMove(cord);
                        return true;
                    }
                }
            }
            //Diagonal
            if(board[0][0] == playerChar && board[1][1] == playerChar){
                if(validateCord(2,2,true)){
                    System.out.println("Making move level \"medium\"");
                    int[] cord= {2,2};
                    inputMove(cord);
                    return true;
                }
            }
            else if(board[1][1] == playerChar && board[2][2] == playerChar){
                if(validateCord(0,0,true)){
                    System.out.println("Making move level \"medium\"");
                    int[] cord= {0,0};
                    inputMove(cord);
                    return true;
                }
            }
            if(board[0][2] == playerChar && board[1][1] == playerChar){
                if(validateCord(2,0,true)){
                    System.out.println("Making move level \"medium\"");
                    int[] cord= {2,0};
                    inputMove(cord);
                    return true;
                }
            }
            else if(board[2][0] == playerChar && board[1][1] == playerChar){
                if(validateCord(0,2,true)){
                    System.out.println("Making move level \"medium\"");
                    int[] cord= {0,2};
                    inputMove(cord);
                    return true;
                }
            }
            return false;

        }
        private void generateMoveHard(){

        }

        private boolean validateCord(int cordX, int cordY, boolean isAI){
            if(board[cordX][cordY] == ' '){
                return true;
            }else if(!isAI){
                System.out.println("This cell is occupied! Choose another one!");
                return false;
            }else{
                return false;
            }

        }

        private void cleanBoard(){
            board = new char[][]{
                    {' ', ' ', ' '},
                    {' ', ' ', ' '},
                    {' ', ' ', ' '}
            };
            player_O = null;
            player_X = null;
            //updateStateBoard();
        }
        private boolean isEmpty(){
            int emptyCounter = 0;
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++) {
                    if(board[i][j] == ' '){
                        emptyCounter++;
                    }
                }
            }
            return emptyCounter == 9;
        }

        private char getEnemyChar(){
            int countX=0,countO=0;
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++) {
                    if(board[i][j] == 'X'){
                        countX++;
                    }
                    if(board[i][j] == 'O'){
                        countO++;
                    }
                }
            }

            if(countX==countO){
                return 'O';
            } else if (countX>countO) {
                return 'X';
            }else{
                return 'O';
            }

        }
        private boolean isFull(){
            int fullCounter = 0;
            for(int i=0;i<3;i++){
                for(int j=0;j<3;j++) {
                    if(board[i][j] != ' '){
                        fullCounter++;
                    }
                }
            }
            return fullCounter == 9;
        }

        protected State getState(){
            return state;
        }

    }
  learner_created: true
- name: src/tictactoe/Move.java
  visible: true
  learner_created: true
- name: src/tictactoe/MinMax.java
  visible: true
  learner_created: true
- name: src/tictactoe/DefaultMinMax.java
  visible: true
  learner_created: true
- name: src/tictactoe/Controller.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Fri, 16 Dec 2022 16:14:04 UTC"
record: 5
